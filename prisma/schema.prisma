// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  firstName String
  lastName  String
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfiles UserProfile[]
  Appointment  Appointment[]
  ratings Rating[]
}

model Location {
  id               Int      @id @default(autoincrement())
  name             String
  address          String
  contact          String
  businessEntityId Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  appointments   Appointment[]
  businessEntity BusinessEntity @relation(fields: [businessEntityId], references: [id])
  Comment        Comment[]
  Rating         Rating[]
}

model BusinessEntity {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String

  appointments               Appointment[]
  locations                  Location[]
  userProfiles               UserProfile[]
  businessEntityServiceLinks BusinessEntityServiceLink[]
  Comment                    Comment[]
  Rating                     Rating[]
}

model UserProfileType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String   @unique
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfiles UserProfile[]
}

model UserProfile {
  id                Int             @id @default(autoincrement())
  userId            Int
  businessEntityId  Int?
  userProfileTypeId Int
  status            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id])
  businessEntity    BusinessEntity? @relation(fields: [businessEntityId], references: [id])
  userProfileType   UserProfileType @relation(fields: [userProfileTypeId], references: [id])
}

model Service {
  id          Int    @id @default(autoincrement())
  name        String
  status      String
  description String
  categoryId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  category  ServiceCategory   @relation(fields: [categoryId], references: [id])
  businessEntityServicesLinks BusinessEntityServiceLink[]
}

model ServiceCategory {
  id          Int    @id @default(autoincrement())
  name        String @unique
  status      String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services  Service[]
}

model BusinessEntityServiceLink {
  id               Int      @id @default(autoincrement())
  businessEntityId Int
  serviceId        Int
  price            Float
  duration         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  businessEntity BusinessEntity @relation(fields: [businessEntityId], references: [id])
  service        Service        @relation(fields: [serviceId], references: [id])
}

model Appointment {
  id                  Int      @id @default(autoincrement())
  startTime           DateTime
  endTime             DateTime
  userId              Int
  businessEntityId    Int
  locationId          Int
  appointmentStatusId Int

  appointmentStatus AppointmentStatus @relation(fields: [appointmentStatusId], references: [id])

  businessEntity BusinessEntity @relation(fields: [businessEntityId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
  location       Location       @relation(fields: [locationId], references: [id])
}

model AppointmentStatus {
  id        Int      @id @default(autoincrement())
  code      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
}

model Comment {
  id               Int    @id @default(autoincrement())
  commentText      String
  businessEntityId Int
  locationId       Int

  businessEntity BusinessEntity @relation(fields: [businessEntityId], references: [id])
  location       Location       @relation(fields: [locationId], references: [id])
}

model Rating {
  id               Int   @id @default(autoincrement())
  rating           Float
  businessEntityId Int
  locationId       Int
  userId           Int

  businessEntity  BusinessEntity @relation(fields: [businessEntityId], references: [id])
  location        Location       @relation(fields: [locationId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
}
